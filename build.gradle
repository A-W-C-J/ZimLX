import java.text.SimpleDateFormat

buildscript {
    ext.kotlin_version = '1.3.21'
    ext.version_library_butterknife = "10.1.0"
    ext.version_plugin_kotlin = "1.3.21"
    ext.enable_plugin_kotlin = true

    ext.getGitHash = { ->
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', 'HEAD'
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } catch (Exception ignored) {
            return 'unknown'
        }
    }

    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

if (enable_plugin_kotlin) {
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: 'kotlin-kapt'
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    Properties localProps = new Properties()
    File localPropsFile = project.rootProject.file('local.properties')
    if (localPropsFile.exists()) {
        localProps.load(localPropsFile.newDataInputStream())
    }

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def name = versionProps['VERSION_NAME']
        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 28

            buildConfigField "String[]", "DETECTED_ANDROID_LOCALES", "${findAndroidLocales()}"
            buildConfigField "String", "BUILD_DATE", "\"${getBuildDate()}\""
            buildConfigField "String", "GITHASH", "\"${getGitHash()}\""

            applicationId "org.zimmob.zimlx"
            versionName name
            versionCode code

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            vectorDrawables.useSupportLibrary = true
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            pseudoLocalesEnabled true
        }
    }


    flavorDimensions "default"
    productFlavors {
        aosp {
            dimension "default"
            applicationId 'org.zimmob.zimlx'
            testApplicationId 'com.android.launcher3.tests'
        }

    }
    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        abortOnError false
    }
    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            assets.srcDirs = ['assets']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDir 'protos/'
                srcDir 'proto_overrides/'
                srcDir 'proto_pixel/'
            }
        }

        androidTest {
            res.srcDirs = ['tests/res']
            java.srcDirs = ['tests/src']
            manifest.srcFile "tests/AndroidManifest-common.xml"
        }

        aosp {
            java.srcDirs = ['src_flags']
            manifest.srcFile "AndroidManifest.xml"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        applicationId 'org.zimmob.zimlx'
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.resValue 'string', 'application_id', variant.applicationId
    }
}

repositories {
    google()
    jcenter()
    mavenCentral()
}

final String SUPPORT_LIBS_VERSION = '1.0.0'
dependencies {
    implementation "androidx.appcompat:appcompat:${SUPPORT_LIBS_VERSION}"
    implementation "androidx.cardview:cardview:${SUPPORT_LIBS_VERSION}"
    implementation "androidx.legacy:legacy-support-v4:${SUPPORT_LIBS_VERSION}"
    implementation "androidx.dynamicanimation:dynamicanimation:${SUPPORT_LIBS_VERSION}"
    implementation "androidx.recyclerview:recyclerview:${SUPPORT_LIBS_VERSION}"
    implementation "androidx.palette:palette:${SUPPORT_LIBS_VERSION}"
    implementation "androidx.preference:preference:1.1.0-alpha04"
    implementation "androidx.legacy:legacy-preference-v14:${SUPPORT_LIBS_VERSION}"
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-alpha3"
    implementation "com.google.android.material:material:${SUPPORT_LIBS_VERSION}"
    implementation 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-7'
    implementation 'com.github.florent37:fiftyshadesof:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.afollestad.material-dialogs:core:2.0.3'
    implementation 'com.mikepenz:fastadapter:3.2.6@aar'
    implementation 'com.mikepenz:fastadapter-commons:3.2.6@aar'
    implementation 'com.mikepenz:fastadapter-extensions:3.2.6@aar'
    implementation 'com.balysv:material-ripple:1.0.2'
    implementation 'cat.ereza:customactivityoncrash:2.2.0'
    implementation 'com.jaredrummler:colorpicker:1.0.1'

    // Tools
    implementation "com.jakewharton:butterknife:${version_library_butterknife}"
    if (enable_plugin_kotlin) {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$version_plugin_kotlin"
    }
    // Processors
    def anpros = ["com.jakewharton:butterknife-compiler:${version_library_butterknife}"]
    for (anpro in anpros) {
        if (enable_plugin_kotlin) {
            kapt anpro
        } else {
            annotationProcessor anpro
        }
    }
    androidTestImplementation 'org.mockito:mockito-core:2.7.22'
    androidTestImplementation 'androidx.test:core:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
}

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'

        generateProtoTasks {
            all().each { task ->
                task.builtins {
                    remove java
                    javanano {
                        option "java_package=launcher_log_extension.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_log.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_dump.proto|com.android.launcher3.model.nano"
                        option "java_package=search.proto|com.google.android.apps.nexuslauncher.search.nano"
                        option "java_package=smartspace.proto|com.google.android.apps.nexuslauncher.smartspace.nano"
                        option "enum_style=java"
                    }
                }
            }
        }
    }
}

final String[] ROOT_TO_RAW_COPY_FILES = ["README.md", "CHANGELOG.md", "CONTRIBUTORS.md", "LICENSE.txt", "LICENSE.md", "LICENSE"]
task copyRepoFiles(type: Copy) {
    from rootProject.files(ROOT_TO_RAW_COPY_FILES)
    into "res/raw"
    rename { String fileName -> fileName.replace(fileName, fileName.toLowerCase()) }
}

@SuppressWarnings(["UnnecessaryQualifiedReference", "SpellCheckingInspection", "GroovyUnusedDeclaration"])
// Returns used android languages as a buildConfig array: {'de', 'it', ..}"
static String findAndroidLocales() {
    Set<String> langs = new HashSet<>()
    new File('.').eachFileRecurse(groovy.io.FileType.DIRECTORIES) {
        final foldername = it.name
        if (foldername.startsWith('values-') && !it.canonicalPath.contains("build" + File.separator + "intermediates")) {
            new File(it.toString()).eachFileRecurse(groovy.io.FileType.FILES) {
                if (it.name.toLowerCase().endsWith(".xml") && it.getCanonicalFile().getText('UTF-8').contains("<string")) {
                    langs.add(foldername.replace("values-", ""))
                }
            }
        }
    }
    return '{' + langs.collect { "\"${it}\"" }.join(",") + '}'
}

@SuppressWarnings(["UnnecessaryQualifiedReference", "SpellCheckingInspection", "GroovyUnusedDeclaration"])
// Returns the build date in a RFC3339 compatible format. TZ is always converted to UTC
static String getBuildDate() {
    final SimpleDateFormat RFC3339_LIKE = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    RFC3339_LIKE.setTimeZone(TimeZone.getTimeZone("UTC"))
    return RFC3339_LIKE.format(new Date())
}
